DEBUG := 0
# Build with 3dfx Voodoo emulation support
WITH_VOODOO ?= 1
# Link statically against libgcc_s and libstdc++.
STATIC_LIBCXX ?= 0
# Build and link our own bundled ogg, flac, etc. statically.
BUNDLED_AUDIO_CODECS ?= 1
# Build and link our own libsndfile statically.
BUNDLED_LIBSNDFILE ?= 1
# Build and link our own sdl and sdl_net statically.
BUNDLED_SDL ?= 0
# Use bundled glib library.
#BUNDLED_GLIB ?= 0
# Build with BASSMIDI support
WITH_BASSMIDI ?= 1
# Build with fluidsynth support
WITH_FLUIDSYNTH ?= 1
# Build with pinhack patch
WITH_PINHACK ?= 1
# Extra command-line flags to pass to pkg-config.
PKG_CONFIG_FLAGS ?=
# Link statically against some system-installed libraries (audio codecs and libsndfile.)
STATIC_PACKAGES ?= 0
# Path to macOS SDK. Leave undefined to use the system default.
#MACOS_SDK_PATH =
# macOS deployment target.
MACOS_DEPLOYMENT_TARGET ?= 10.15
# CMake generator.
CMAKE_GENERATOR ?= Ninja
# Meson executable.
MESON ?= meson
# Ninja executable.
NINJA ?= ninja

GIT_VERSION := "$(shell git rev-parse --short HEAD)"
SVN_VERSION := "$(shell cat svn)"

UNAME=$(shell uname -s)
UNAMEM=$(shell uname -m)
NUMPROC?=$(shell nproc)
ifeq ($(NUMPROC),)
	NUMPROC=2
endif

CXXFLAGS += -std=gnu++17 -Wno-register -DFMT_HEADER_ONLY
COMMONFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\" -DSVN_VERSION=\"$(SVN_VERSION)\"
ifeq ($(platform), libnx)
	# The libretro buildbot has a cmake version that's too old and doesn't know about C++17. Use
	# this for now as a workaround until the buildbot is updated.
	EXTRA_CMAKE_FLAGS := -DCMAKE_CXX_FLAGS="-std=gnu++17"
else
	EXTRA_CMAKE_FLAGS := -DCMAKE_CXX_STANDARD=17
endif

# Target triplet for cross compilation. When cross compiling from Linux to
# Windows 32-bit using MXE for example, you'd set this to something like:
#
#     $ make TARGET_TRIPLET=i686-w64-mingw32.static [...]
#
# Or whatever your wanted target is.
ifdef TARGET_TRIPLET
	cross_prefix = $(TARGET_TRIPLET)-
endif
AR:=$(cross_prefix)$(AR)
AS:=$(cross_prefix)$(AS)
CC:=$(cross_prefix)$(CC)
CXX:=$(cross_prefix)$(CXX)
LD:=$(cross_prefix)$(LD)
CMAKE=$(cross_prefix)cmake
PKGCONFIG=$(cross_prefix)pkg-config

platform ?= unix
ifneq ($(findstring MINGW,$(UNAME)),)
	platform = win
else ifneq ($(findstring Darwin,$(UNAME)),)
	platform = osx
else ifneq ($(findstring win,$(UNAME)),)
	platform = win
endif

LIBRETRO_DIR := libretro
TARGET_NAME := dosbox_core
WITH_DYNAREC ?=

# try to guess the dynarec based on the host system, unreliable
ifeq ($(platform),win)
	ifneq ($(findstring MINGW32,$(UNAME)),)
		WITH_DYNAREC := x86
	else ifneq ($(findstring MINGW64,$(UNAME)),)
		WITH_DYNAREC := x86_64
	endif
else ifeq ($(platform),unix)
	ifneq ($(findstring x86_64,$(UNAMEM)),)
		WITH_DYNAREC := x86_64
	else ifneq ($(findstring amd64,$(UNAMEM)),)
		WITH_DYNAREC := x86_64
	else ifneq ($(findstring 86,$(UNAMEM)),)
		WITH_DYNAREC := x86
	else ifneq ($(findstring aarch64,$(UNAMEM)),)
		WITH_DYNAREC := arm64
	else ifneq ($(findstring arm64,$(UNAMEM)),)
		WITH_DYNAREC := arm64
	else ifneq ($(findstring arm,$(UNAMEM)),)
		WITH_DYNAREC := arm
	endif
else ifeq ($(platform),osx)
	ifeq ($(target), x86)
		WITH_DYNAREC := x86
	else ifeq ($(target),x86_64)
		WITH_DYNAREC := x86_64
	endif
endif

# enable IPX
ifeq ($(platform),win)
	WITH_IPX := 1
else ifeq ($(platform),unix)
	WITH_IPX := 1
else ifeq ($(platform),osx)
	WITH_IPX := 1
endif

# arm
ifeq ($(CORTEX_A7), 1)
	COMMONFLAGS += -marm -mcpu=cortex-a7
	WITH_DYNAREC = arm
	ifeq ($(ARM_NEON), 1)
		COMMONFLAGS += -mfpu=neon-vfpv4
	endif
endif
ifeq ($(ARM_HARDFLOAT), 1)
	COMMONFLAGS += -mfloat-abi=hard
endif

# flags
ifeq ($(platform), osx)
	COMMONFLAGS += -DC_HAVE_MPROTECT="1"
	TARGET := $(TARGET_NAME)_libretro.dylib
	LDFLAGS += -dynamiclib `$(PKGCONFIG) $(PKG_CONFIG_FLAGS) --libs SDL_net`
	fpic = -fPIC
	ifeq ($(arch),ppc)
		COMMONFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
	endif
	OSXVER = `sw_vers -productVersion | cut -d. -f 2`
	OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
	fpic += -mmacosx-version-min=$(MACOS_DEPLOYMENT_TARGET)
	EXTRA_CMAKE_FLAGS := -DCMAKE_OSX_DEPLOYMENT_TARGET=$(MACOS_DEPLOYMENT_TARGET)
	ifdef MACOS_SDK_PATH
		COMMONFLAGS += -isysroot $(MACOS_SDK_PATH)
		EXTRA_CMAKE_FLAGS += -DCMAKE_OSX_SYSROOT=$(MACOS_SDK_PATH)
		LDFLAGS += -isysroot $(MACOS_SDK_PATH)
	endif
	ifndef ($(UNIVERSAL))
		CFLAGS += $(ARCHFLAGS)
		CXXFLAGS += $(ARCHFLAGS)
		LDFLAGS += $(ARCHFLAGS)
	endif
	COMMONFLAGS += -D__MACOSX__
else ifneq (,$(findstring ios,$(platform)))
	TARGET := $(TARGET_NAME)_libretro_ios.dylib
	COMMONFLAGS += -DHAVE_POSIX_MEMALIGN=1 -marm
	fpic = -fPIC
	LDFLAGS += -dynamiclib
	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	endif
	ifeq ($(platform),ios-arm64)
		CC = cc -arch arm64 -isysroot $(IOSSDK)
		CXX = c++ -arch arm64 -isysroot $(IOSSDK)
		WITH_DYNAREC = arm64
	else
		CC = cc -arch armv7 -isysroot $(IOSSDK)
		CXX = c++ -arch armv7 -isysroot $(IOSSDK)
		WITH_DYNAREC = arm
	endif
	COMMONFLAGS += -DIOS
	ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
		CC += -miphoneos-version-min=8.0
		COMMONFLAGS += -miphoneos-version-min=8.0
	else
		CC += -miphoneos-version-min=5.0
		COMMONFLAGS += -miphoneos-version-min=5.0
	endif
else ifeq ($(platform), psp1)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = psp-gcc$(EXE_EXT)
	CXX = psp-g++$(EXE_EXT)
	AR = psp-ar$(EXE_EXT)
	WITH_DYNAREC = mips
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DPSP -G0 -I$(shell psp-config --pspsdk-path)/include -DRENDER_USE_ADVANCED_SCALERS=0
	STATIC_LINKING = 1
else ifeq ($(platform), vita)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = arm-vita-eabi-gcc$(EXE_EXT)
	CXX = arm-vita-eabi-g++$(EXE_EXT)
	AR = arm-vita-eabi-ar$(EXE_EXT)
	WITH_DYNAREC = arm
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DVITA -DWORDS_BIGENDIAN
	COMMONFLAGS += -mthumb -mcpu=cortex-a9 -mfloat-abi=hard -ftree-vectorize -ffast-math -fsingle-precision-constant -funroll-loops
	COMMONFLAGS += -mword-relocations
	COMMONFLAGS += -fno-optimize-sibling-calls
	EXTRA_CMAKE_FLAGS += -DCMAKE_TOOLCHAIN_FILE="$(VITASDK)/share/vita.toolchain.cmake"
	STATIC_LINKING = 1
else ifeq ($(platform), ctr)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITARM)/bin/arm-none-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITARM)/bin/arm-none-eabi-g++$(EXE_EXT)
	AR = $(DEVKITARM)/bin/arm-none-eabi-ar$(EXE_EXT)
	WITH_DYNAREC = oldarm
	ENDIANNESS_DEFINES :=
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DARM11 -D_3DS -Os -s -I$(CTRULIB)/include/
	COMMONFLAGS += -DHAVE_MKDIR
	COMMONFLAGS += -march=armv6k -mtune=mpcore -mfloat-abi=hard
	COMMONFLAGS += -mword-relocations
	COMMONFLAGS += -fomit-frame-pointer -fstrict-aliasing -ffast-math
	COMMONFLAGS += -DDISABLE_EXCEPTIONS -fpermissive
	COMMONFLAGS += -I$(DEVKITPRO)/libctru/include
	STATIC_LINKING = 1
else ifeq ($(platform), ngc)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DWORDS_BIGENDIAN=1
	STATIC_LINKING = 1
else ifeq ($(platform), wii)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DGEKKO -mrvl -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DMSB_FIRST -DWORDS_BIGENDIAN=1 -fpermissive
	COMMONFLAGS += -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int
	STATIC_LINKING = 1
	WITH_DYNAREC =
else ifeq ($(platform), wiiu)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DGEKKO -DWIIU -DHW_RVL -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DMSB_FIRST -DWORDS_BIGENDIAN=1 -I./deps/include/
	COMMONFLAGS += -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int
	STATIC_LINKING = 1
	WITH_DYNAREC =
else ifeq ($(platform), libnx)
	export DEPSDIR = $(CURDIR)
	include $(DEVKITPRO)/libnx/switch_rules
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CFLAGS += -g -O2 -fPIE -I$(LIBNX)/include/ -ffunction-sections -fdata-sections -ftls-model=local-exec -Wl,--allow-multiple-definition -specs=$(LIBNX)/switch.specs
	CFLAGS += $(INCLUDE) -D__SWITCH__ -DHAVE_LIBNX
	CXXFLAGS += $(ASFLAGS) $(CFLAGS)
	EXTRA_CMAKE_FLAGS += -DCMAKE_TOOLCHAIN_FILE=$(abspath libnx.cmake)
	WITH_BASSMIDI = 0
	WITH_FLUIDSYNTH = 0
	WITH_DYNAREC = arm64
	STATIC_LINKING = 1
	WITH_FAKE_SDL = 1
else ifeq ($(platform), emscripten)
	TARGET := $(TARGET_NAME)_libretro_$(platform).bc
	STATIC_LINKING = 1
	LDFLAGS += -Wl,-Bstatic
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DEMSCRIPTEN
else ifeq ($(platform), ps3)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -mhard-float -D__POWERPC__ -D__ppc__ -DWORDS_BIGENDIAN=1
	STATIC_LINKING = 1
	CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
	CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
	AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
else ifeq ($(platform), xbox1_msvc2003)
	CFLAGS += -D__WIN32__
	CXXFLAGS += -D__WIN32__
	TARGET := $(TARGET_NAME)_libretro_xdk1.lib
	MSVCBINDIRPREFIX = $(XDK)/xbox/bin/vc71
	CC  = "$(MSVCBINDIRPREFIX)/CL.exe"
	CXX  = "$(MSVCBINDIRPREFIX)/CL.exe"
	LD   = "$(MSVCBINDIRPREFIX)/lib.exe"
	export INCLUDE := $(XDK)/xbox/include
	export LIB := $(XDK)/xbox/lib
	PSS_STYLE :=2
	CFLAGS   += -D_XBOX -D_XBOX1
	CXXFLAGS += -D_XBOX -D_XBOX1
	WITH_FAKE_SDL = 1
	STATIC_LINKING=1
	HAS_GCC := 0
else ifeq ($(platform), win)
	COMMONFLAGS += -mno-ms-bitfields
	TARGET := $(TARGET_NAME)_libretro.dll
	LDFLAGS += -shared -Wl,--version-script=link.T -lwinmm
	ifeq ($(WITH_FAKE_SDL), 1)
		LDFLAGS += -Wl,-Bstatic
	else
		LDFLAGS += -Wl,-Bstatic `$(cross_prefix)sdl-config --static-libs` -lSDL_net
		LDFLAGS += -Wl,-Bdynamic -liphlpapi -lws2_32 -lopengl32
	endif
	COMMONFLAGS += -DWIN32=1 -D__USE_W32_SOCKETS -Werror=return-type
else
	ifeq ($(UNAME),Linux)
		WITH_ALSA_MIDI := 1
		COMMONFLAGS += -DHAVE_ALSA
		LDFLAGS += `$(PKGCONFIG) --libs alsa`
	endif
	BUNDLED_GLIB ?= 1
	COMMONFLAGS += -DC_HAVE_MPROTECT="1"
	TARGET := $(TARGET_NAME)_libretro.so
	LDFLAGS += -shared -Wl,--version-script=link.T
	ifeq ($(WITH_FAKE_SDL), 1)
		LDFLAGS += -Wl,-Bstatic
	else
		LDFLAGS += `$(PKGCONFIG) --libs SDL_net`
	endif
	COMMONFLAGS += -DUNIX_PORTABLE
	LDFLAGS += -Wl,-Bdynamic
	fpic = -fPIC
endif
ifeq ($(DEBUG), 1)
	COMMONFLAGS += -O0 -g
	CMAKE_BUILD_TYPE = Debug
	MESON_BUILD_TYPE = debug
else
	COMMONFLAGS += -O3 -DNDEBUG
	CMAKE_BUILD_TYPE = Release
	MESON_BUILD_TYPE = release
endif

ifeq ($(WITH_FAKE_SDL), 1)
	COMMONFLAGS += -DWITH_FAKE_SDL -Ifakesdl/SDL
else
	COMMONFLAGS += `$(PKGCONFIG) --cflags sdl`
	ifeq ($(WITH_IPX), 1)
		COMMONFLAGS += -DC_IPX
	endif
endif

ifeq ($(WITH_VOODOO), 1)
	COMMONFLAGS += -DWITH_VOODOO=1
endif

CORE_DIR := ..
INCFLAGS :=
SOURCES_C :=
SOURCES_CXX :=

DEPS_BIN_DIR = $(CURDIR)/deps_bin
ifeq ($(BUNDLED_SDL), 1)
	include deps/sdl.makefile
	include deps/sdl_net.makefile
endif
ifeq ($(BUNDLED_GLIB), 1)
	include deps/libffi.makefile
	include deps/glib.makefile
endif
ifeq ($(WITH_FLUIDSYNTH), 1)
	ifeq ($(BUNDLED_AUDIO_CODECS), 1)
		include deps/ogg.makefile
		include deps/vorbis.makefile
		include deps/opus.makefile
		include deps/flac.makefile
	endif
	ifeq ($(BUNDLED_LIBSNDFILE), 1)
		include deps/libsndfile.makefile
	endif
	include deps/libinstpatch.makefile
	include deps/fluidsynth.makefile
endif
include deps/munt.makefile
export PKG_CONFIG_PATH := $(DEPS_BIN_DIR)/lib/pkgconfig:$(PKG_CONFIG_PATH)
export PATH := $(DEPS_BIN_DIR)/bin:$(PATH)
# When cross compiling with MXE, we need PKG_CONFIG_PATH_<TARGET_TRIPLET> but with all dashes and
# dots converted to underscores.
ifdef TARGET_TRIPLET
	export PKG_CONFIG_PATH_$(subst .,_,$(subst -,_,$(TARGET_TRIPLET))) = $(PKG_CONFIG_PATH)
endif

include Makefile.common

OBJECTS = $(SOURCES_CXX:.cpp=.o) $(SOURCES_C:.c=.o)
OBJECT_DEPS = $(OBJECTS:.o=.d)
INCFLAGS += $(MUNT_INCFLAGS) -Ideps/fmt/include
ifeq ($(WITH_BASSMIDI), 1)
	COMMONFLAGS += -DWITH_BASSMIDI=1
	LDFLAGS += -ldl
endif
ifeq ($(WITH_PINHACK), 1)
	COMMONFLAGS += -DWITH_PINHACK=1
endif
CXXFLAGS += -D__LIBRETRO__ -MMD $(fpic) $(INCFLAGS) $(COMMONFLAGS)
CFLAGS += -D__LIBRETRO__ -MMD $(fpic) $(INCFLAGS) $(COMMONFLAGS)
LDFLAGS += -lm $(fpic)
ifeq ($(STATIC_PACKAGES), 1)
	LDFLAGS += -Wl,-Bstatic
	PKG_CONFIG_FLAGS += --static
endif
LDFLAGS += $(MUNT_LDFLAGS)
ifdef EXTRA_PACKAGES
	LDFLAGS += `$(PKGCONFIG) $(PKG_CONFIG_FLAGS) --libs $(EXTRA_PACKAGES)`
	INCFLAGS += `$(PKGCONFIG) $(PKG_CONFIG_FLAGS) --cflags-only-I $(EXTRA_PACKAGES)`
endif
export CMAKE_GENERATOR

# We append these flags here so they appear after all other flags, otherwise they might not work
# correctly.
ifeq ($(STATIC_LIBCXX), 1)
	LDFLAGS += -static-libgcc -static-libstdc++
endif

.PHONY: all
all: $(TARGET)

.PHONY: deps
deps:

$(OBJECTS): $(FLUIDSYNTH) $(MUNT) $(SDLNET)

$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
	./merge_static.sh $(AR) $@ $@ deps_bin/munt_build/libmt32emu.a
else
	$(CXX) -o $@ $(OBJECTS) $(LDFLAGS)
endif

-include $(OBJECT_DEPS)

.PHONY: targetclean
targetclean:
	rm -f $(OBJECTS) $(OBJECT_DEPS) $(TARGET)

.PHONY: depsclean
depsclean:
	rm -rf "$(DEPS_BIN_DIR)"

.PHONY: clean
clean: depsclean targetclean

.PHONY: download_github_windows_x64
download_github_windows_x64:
	rm -f windows-x64.zip
	wget 'https://github.com/realnc/dosbox-core/releases/download/latest_build/windows-x64.zip'
	unzip windows-x64.zip

.PHONY: download_github_windows_x86
download_github_windows_x86:
	rm -f windows-x86.zip
	wget 'https://github.com/realnc/dosbox-core/releases/download/latest_build/windows-x86.zip'
	unzip windows-x86.zip

.PHONY: download_github_macos
download_github_macos:
	rm -f macOS-x64.zip
	curl -s -S -L -O 'https://github.com/realnc/dosbox-core/releases/download/latest_build/macOS-x64.zip'
	unzip macOS-x64.zip

.PHONY: download_github_armhf
download_github_armhf:
	rm -f linux-armhf.zip
	curl -s -S -L -O 'https://github.com/realnc/dosbox-core/releases/download/latest_build/linux-armhf.zip'
	unzip linux-armhf.zip

.PHONY: download_github_linux64
download_github_linux64:
	rm -f linux-x64.zip
	curl -s -S -L -O 'https://github.com/realnc/dosbox-core/releases/download/latest_build/linux-x64.zip'
	unzip linux-x64.zip

.DEFAULT_GOAL := all
